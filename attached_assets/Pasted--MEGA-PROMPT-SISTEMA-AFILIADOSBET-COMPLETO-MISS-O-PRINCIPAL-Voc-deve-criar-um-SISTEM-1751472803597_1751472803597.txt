
# üöÄ MEGA PROMPT: SISTEMA AFILIADOSBET COMPLETO

## üéØ MISS√ÉO PRINCIPAL
Voc√™ deve criar um **SISTEMA DE AFILIADOS PARA CASAS DE APOSTAS** robusto, escal√°vel e 100% funcional. Este √© um projeto CR√çTICO que precisa funcionar perfeitamente em produ√ß√£o.

## üìã ARQUITETURA OBRIGAT√ìRIA

### STACK TECNOL√ìGICO FIXO
```bash
# Backend
- Node.js 20+ com TypeScript
- Express.js (servidor web)
- PostgreSQL (produ√ß√£o) / SQLite (desenvolvimento)
- Drizzle ORM (migrations autom√°ticas)
- bcrypt (autentica√ß√£o)
- express-session (sess√µes)

# Frontend
- React 18 com TypeScript
- Vite (build system)
- Tailwind CSS + Shadcn/UI
- Wouter (roteamento)
- React Query (cache/estado)
- Lucide React (√≠cones)

# Estrutura de Deploy
- Porta 5000 (obrigat√≥ria)
- Host 0.0.0.0 (acess√≠vel externamente)
- Build √∫nico para produ√ß√£o
```

### ESTRUTURA DE PASTAS OBRIGAT√ìRIA
```
projeto/
‚îú‚îÄ‚îÄ client/                 # Frontend React
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # Componentes UI
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/          # P√°ginas do sistema
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/          # Custom hooks
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lib/            # Utilit√°rios
‚îú‚îÄ‚îÄ server/                 # Backend Node.js
‚îÇ   ‚îú‚îÄ‚îÄ routes.ts           # Todas as rotas API
‚îÇ   ‚îú‚îÄ‚îÄ auth.ts             # Sistema de autentica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ storage.ts          # Camada de dados
‚îÇ   ‚îî‚îÄ‚îÄ index.ts            # Servidor principal
‚îú‚îÄ‚îÄ shared/                 # C√≥digo compartilhado
‚îÇ   ‚îî‚îÄ‚îÄ schema.ts           # Schema do banco
‚îî‚îÄ‚îÄ package.json            # Depend√™ncias
```

## üîê SISTEMA DE AUTENTICA√á√ÉO

### REQUISITOS DE AUTH
1. **Dois tipos de usu√°rio**: `admin` e `affiliate`
2. **Login**: Por username/email + senha
3. **Sess√µes persistentes**: express-session
4. **Senhas hash**: bcrypt
5. **Middleware de prote√ß√£o**: todas as rotas protegidas

### FLUXO DE AUTENTICA√á√ÉO
```typescript
// Middleware obrigat√≥rio
function isAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  res.status(401).json({ message: "Unauthorized" });
}

function isAdmin(req, res, next) {
  if (req.user.role === "admin") return next();
  res.status(403).json({ message: "Forbidden" });
}
```

## üèóÔ∏è BANCO DE DADOS OBRIGAT√ìRIO

### TABELAS PRINCIPAIS
```sql
-- Usu√°rios (afiliados e admins)
users: id, username, password, email, role, fullName, createdAt

-- Perfis de afiliados (dados espec√≠ficos)
affiliate_profiles: userId, points, level, totalCommission, availableBalance

-- Casas de apostas
betting_houses: id, name, description, logoUrl, websiteUrl, baseCpaCommission, baseRevSharePercent, isActive

-- Links de afiliado
affiliate_links: id, userId, bettingHouseId, linkCode, fullUrl, customName, isActive, createdAt

-- Eventos de rastreamento
affiliate_events: id, subid, eventType, affiliateId, timestamp, ipAddress, depositAmount, commissionAmount, status

-- Cliques de rastreamento
clicks: id, affiliateId, ip, userAgent, timestamp, converted

-- Registros convertidos
registrations: id, affiliateId, username, timestamp, deposited

-- Dep√≥sitos
deposits: id, registrationId, amount, commissionAmount, timestamp, status
```

## üìä PAINEL ADMINISTRATIVO (13 ROTAS)

### ROTAS ADMIN OBRIGAT√ìRIAS
```typescript
// 1. Dashboard Admin - /admin
- M√©tricas globais: total afiliados, convers√µes, receita
- Gr√°ficos de performance
- Top afiliados do m√™s

// 2. Gerenciar Afiliados - /admin/affiliates  
- Lista completa de afiliados
- Aprovar/rejeitar novos afiliados
- Editar comiss√µes personalizadas
- Ver detalhes de performance

// 3. Casas de Apostas - /admin/betting-houses
- CRUD completo de casas parceiras
- Configurar comiss√µes base (CPA + RevShare)
- Upload de logos
- Ativar/desativar casas

// 4. Relat√≥rios Admin - /admin/reports
- Relat√≥rios de convers√£o por per√≠odo
- Export para CSV/Excel
- Gr√°ficos de funil de convers√£o
- An√°lise por dispositivo/fonte

// 5. Pagamentos Admin - /admin/payments
- Processar pagamentos de afiliados
- Hist√≥rico de comiss√µes pagas
- Pend√™ncias de pagamento
- Configurar m√©todos de pagamento

// 6. Configura√ß√µes - /admin/settings
- Configura√ß√µes globais do sistema
- APIs e integra√ß√µes
- Comiss√µes padr√£o
- Regras de neg√≥cio
```

### COMPONENTES ADMIN OBRIGAT√ìRIOS
```typescript
// AdminLayout: Layout base com sidebar
// AffiliateDetailsDialog: Modal com detalhes do afiliado
// AdminOnboardingProvider: Tour inicial
// MetricsCards: Cards de m√©tricas
// DataTable: Tabela com pagina√ß√£o e filtros
```

## üë§ PAINEL DO AFILIADO (6 ROTAS)

### ROTAS AFILIADO OBRIGAT√ìRIAS
```typescript
// 1. Dashboard - /home
- M√©tricas pessoais: cliques, convers√µes, comiss√µes
- Gr√°fico de performance semanal/mensal
- Links mais perform√°ticos

// 2. Casas Dispon√≠veis - /betting-houses
- Lista de casas parceiras ativas
- Comiss√µes oferecidas (CPA + RevShare)
- Bot√£o para gerar link de afiliado

// 3. Meus Links - /my-links
- Lista de links gerados pelo afiliado
- Performance individual de cada link
- Editar nomes personalizados
- Copiar/compartilhar links

// 4. Relat√≥rios - /reports
- Relat√≥rios detalhados de performance
- Filtros por per√≠odo, casa, campanhas
- Gr√°ficos de convers√£o

// 5. Pagamentos - /payments
- Hist√≥rico de comiss√µes recebidas
- Saldo dispon√≠vel vs pendente
- Solicitar saques
- Configurar dados de pagamento (PIX)

// 6. Perfil - /profile
- Dados pessoais e contato
- Alterar senha
- Configura√ß√µes de notifica√ß√µes
- Upload de foto de perfil
```

### COMPONENTES AFILIADO OBRIGAT√ìRIOS
```typescript
// AffiliateLayout: Layout base com sidebar
// PerformanceChart: Gr√°fico de performance
// LinkGenerator: Gerador de links
// PaymentHistory: Hist√≥rico de pagamentos
// ProfileForm: Formul√°rio de perfil
```

## üîó SISTEMA DE RASTREAMENTO

### FLUXO DE AFILIA√á√ÉO OBRIGAT√ìRIO
```typescript
// 1. Clique no link de afiliado
GET /ref/:subid
- Registra clique no banco
- Define cookie de rastreamento (90 dias)
- Redireciona para casa de apostas

// 2. Usu√°rio se registra na casa
POST /api/tracking/registration
- Associa registro ao afiliado via cookie
- Calcula comiss√£o CPA
- Atualiza m√©tricas

// 3. Usu√°rio faz dep√≥sito
POST /api/tracking/deposit  
- Associa dep√≥sito ao afiliado
- Calcula comiss√£o RevShare
- Atualiza saldos
```

### APIS DE RASTREAMENTO
```typescript
// Rastrear clique
app.get("/ref/:subid", async (req, res) => {
  // Buscar afiliado pelo subid
  // Registrar clique com IP, user-agent, timestamp
  // Definir cookie de rastreamento
  // Redirecionar para casa de apostas
});

// Rastrear registro
app.post("/api/tracking/registration", async (req, res) => {
  // Verificar cookie de afiliado
  // Registrar convers√£o
  // Calcular comiss√£o CPA
  // Atualizar m√©tricas do afiliado
});

// Rastrear dep√≥sito
app.post("/api/tracking/deposit", async (req, res) => {
  // Verificar associa√ß√£o com afiliado
  // Calcular comiss√£o RevShare
  // Atualizar saldos
  // Notificar afiliado
});
```

## üí∞ SISTEMA DE COMISS√ïES

### TIPOS DE COMISS√ÉO
```typescript
// CPA (Cost Per Acquisition) - Valor fixo por registro
interface CPACommission {
  value: number;        // Ex: R$ 50 por registro
  house: string;        // Casa de apostas
  affiliate: string;    // Afiliado espec√≠fico (opcional)
}

// RevShare - Porcentagem sobre dep√≥sitos
interface RevShareCommission {
  percentage: number;   // Ex: 25% sobre dep√≥sitos
  lifetime: boolean;    // Comiss√£o vital√≠cia ou por per√≠odo
  house: string;
  affiliate: string;
}
```

### C√ÅLCULO AUTOM√ÅTICO
```typescript
// Fun√ß√£o obrigat√≥ria para calcular comiss√µes
async function calculateCommission(
  eventType: 'registration' | 'deposit',
  affiliateId: number,
  houseId: number,
  amount?: number
): Promise<number> {
  // Buscar comiss√µes configuradas
  // Aplicar regras espec√≠ficas do afiliado
  // Calcular valor final
  // Retornar comiss√£o em centavos
}
```

## üé® DESIGN SYSTEM OBRIGAT√ìRIO

### CORES FIXAS (N√ÉO CUSTOMIZAR)
```css
/* Tema escuro obrigat√≥rio */
--primary: #3B82F6;        /* Azul principal */
--secondary: #10B981;      /* Verde secund√°rio */
--accent: #8B5CF6;         /* Roxo de destaque */
--danger: #EF4444;         /* Vermelho de erro */
--warning: #F59E0B;        /* Amarelo de aviso */
--background: #0F172A;     /* Fundo escuro */
--surface: #1E293B;        /* Superf√≠cie */
--muted: #64748B;          /* Texto secund√°rio */
--foreground: #F8FAFC;     /* Texto principal */
```

### COMPONENTES UI OBRIGAT√ìRIOS
```typescript
// Cards responsivos com glassmorphism
// Bot√µes com estados hover/loading/disabled
// Tabelas com pagina√ß√£o e ordena√ß√£o
// Formul√°rios com valida√ß√£o em tempo real
// Modais/dialogs responsivos
// Sidebars colaps√°veis
// Gr√°ficos interativos (Chart.js/Recharts)
// Loading states elegantes
```

## üì± RESPONSIVIDADE CR√çTICA

### BREAKPOINTS OBRIGAT√ìRIOS
```css
/* Mobile First - Obrigat√≥rio */
sm: 640px   /* Tablet pequeno */
md: 768px   /* Tablet */
lg: 1024px  /* Desktop pequeno */
xl: 1280px  /* Desktop grande */
2xl: 1536px /* Desktop muito grande */
```

### COMPORTAMENTOS MOBILE
```typescript
// Sidebar: Overlay em mobile, fixa em desktop
// Tabelas: Scroll horizontal em mobile
// Cards: Stack vertical em mobile
// Formul√°rios: Inputs maiores em mobile
// Bot√µes: Touch-friendly (min 44px)
```

## üîß APIS CR√çTICAS DO BACKEND

### ROTAS DE M√âTRICAS
```typescript
// M√©tricas do afiliado
GET /api/metrics              // M√©tricas gerais
GET /api/affiliate/stats      // Estat√≠sticas detalhadas  
GET /api/affiliate/chart      // Dados para gr√°ficos
GET /api/affiliate/clicks     // Lista de cliques
GET /api/affiliate/activities // Atividades recentes

// M√©tricas admin
GET /api/admin/stats          // Estat√≠sticas da plataforma
GET /api/admin/affiliates     // Lista de afiliados
GET /api/admin/reports        // Relat√≥rios avan√ßados
```

### ROTAS DE GEST√ÉO
```typescript
// Casas de apostas
GET    /api/betting-houses           // Listar casas
POST   /api/betting-houses           // Criar casa
PUT    /api/betting-houses/:id       // Atualizar casa
DELETE /api/betting-houses/:id       // Deletar casa

// Links de afiliado
GET    /api/affiliate-links          // Meus links
POST   /api/affiliate-links          // Criar link
PUT    /api/affiliate-links/:id      // Atualizar link
DELETE /api/affiliate-links/:id      // Deletar link

// Perfil de usu√°rio
GET    /api/profile                  // Dados do perfil
PUT    /api/profile/address          // Atualizar endere√ßo
PUT    /api/profile/contact          // Atualizar contato
PUT    /api/profile/picture          // Atualizar foto
```

## üöÄ FUNCIONALIDADES AVAN√áADAS

### SISTEMA DE N√çVEIS DE AFILIADO
```typescript
// N√≠veis baseados em performance
const affiliateLevels = {
  'Novato': { minCommission: 0, bonusPercent: 0 },
  'Bronze': { minCommission: 1000, bonusPercent: 5 },
  'Prata': { minCommission: 5000, bonusPercent: 10 },
  'Ouro': { minCommission: 15000, bonusPercent: 15 },
  'Diamante': { minCommission: 50000, bonusPercent: 25 }
};
```

### SISTEMA DE PONTOS
```typescript
// Pontos por a√ß√µes
const pointsSystem = {
  'first_registration': 100,
  'daily_login': 10,
  'link_created': 25,
  'conversion_achieved': 50,
  'deposit_conversion': 100
};
```

### NOTIFICA√á√ïES EM TEMPO REAL
```typescript
// Sistema de notifica√ß√µes
interface Notification {
  id: string;
  type: 'success' | 'warning' | 'info' | 'error';
  title: string;
  message: string;
  timestamp: Date;
  read: boolean;
}
```

## üõ°Ô∏è SEGURAN√áA OBRIGAT√ìRIA

### VALIDA√á√ïES CR√çTICAS
```typescript
// Middleware de seguran√ßa
- Rate limiting nas APIs cr√≠ticas
- Valida√ß√£o de inputs com Zod
- Sanitiza√ß√£o de dados do usu√°rio
- CORS configurado corretamente
- Headers de seguran√ßa obrigat√≥rios

// Valida√ß√£o de sess√£o
- Timeout de sess√£o (24h)
- Regenera√ß√£o de session ID
- Verifica√ß√£o de IP (opcional)
```

### TRATAMENTO DE ERROS
```typescript
// Wrapper obrigat√≥rio para todas as fun√ß√µes
async function safeExecute<T>(
  operation: () => Promise<T>,
  fallback: T,
  errorMessage: string
): Promise<T> {
  try {
    return await operation();
  } catch (error) {
    console.error(errorMessage, error);
    return fallback;
  }
}
```

## üìä M√âTRICAS E ANALYTICS

### DASHBOARDS OBRIGAT√ìRIOS
```typescript
// Dashboard Admin
- Total de afiliados ativos/inativos
- Receita total do per√≠odo
- Top 5 afiliados por comiss√£o
- Funil de convers√£o global
- Gr√°fico de crescimento mensal

// Dashboard Afiliado  
- Cliques do dia/semana/m√™s
- Taxa de convers√£o atual
- Comiss√µes pendentes/pagas
- Performance por casa de apostas
- Ranking entre afiliados
```

### RELAT√ìRIOS EXPORT√ÅVEIS
```typescript
// Formatos obrigat√≥rios
- CSV (performance, comiss√µes, cliques)
- Excel (relat√≥rios mensais)
- PDF (relat√≥rios executivos)
- JSON (dados para APIs)
```

## üîÑ INTEGRA√á√ÉO COM CASAS DE APOSTAS

### SISTEMA DE POSTBACK
```typescript
// URL de postback configur√°vel por casa
interface PostbackConfig {
  houseId: number;
  registrationUrl: string;  // URL para registros
  depositUrl: string;       // URL para dep√≥sitos
  testMode: boolean;        // Modo de teste
  secretKey: string;        // Chave de valida√ß√£o
}

// Envio autom√°tico de postback
async function sendPostback(
  config: PostbackConfig,
  eventData: AffiliateEvent
): Promise<boolean> {
  // Montar payload
  // Enviar requisi√ß√£o HTTP
  // Registrar log de envio
  // Tratar retries autom√°ticos
}
```

## üöÄ DEPLOY E PRODU√á√ÉO

### CONFIGURA√á√ÉO DE PRODU√á√ÉO
```typescript
// Vari√°veis de ambiente obrigat√≥rias
DATABASE_URL=postgresql://...     // PostgreSQL para produ√ß√£o
SESSION_SECRET=random_secret      // Chave de sess√£o
NODE_ENV=production              // Ambiente
PORT=5000                        // Porta obrigat√≥ria

// Scripts de build
npm run build    // Build do frontend + backend
npm run start    // Iniciar em produ√ß√£o
npm run dev      // Desenvolvimento local
```

### ESTRUTURA DE BUILD
```typescript
// Build unificado
dist/
‚îú‚îÄ‚îÄ client/          # Frontend buildado
‚îú‚îÄ‚îÄ server/          # Backend compilado
‚îî‚îÄ‚îÄ index.js         # Entrada principal
```

## ‚úÖ CHECKLIST DE ENTREGA

### FUNCIONALIDADES CR√çTICAS
- [ ] Sistema de auth completo (login/logout/sess√µes)
- [ ] 13 rotas principais funcionando
- [ ] Sistema de rastreamento (cliques ‚Üí registros ‚Üí dep√≥sitos)
- [ ] C√°lculo autom√°tico de comiss√µes
- [ ] Dashboards com m√©tricas reais
- [ ] CRUD de casas de apostas
- [ ] Gest√£o de afiliados (aprovar/rejeitar)
- [ ] Sistema de perfil completo
- [ ] Responsividade mobile perfeita
- [ ] Deploy em produ√ß√£o funcionando

### QUALIDADE DE C√ìDIGO
- [ ] TypeScript em 100% do c√≥digo
- [ ] Tratamento de erros robusto
- [ ] Valida√ß√£o de dados com Zod
- [ ] Interface consistente com Shadcn/UI
- [ ] Performance otimizada (lazy loading, cache)
- [ ] C√≥digo documentado e limpo

## üéØ RESULTADO ESPERADO

O sistema deve ser um **PRODUTO COMPLETO** que pode ser usado imediatamente por casas de apostas e afiliados. Deve ter a qualidade de um software comercial, com interface profissional, performance r√°pida e zero bugs cr√≠ticos.

O foco √© criar um sistema que **FUNCIONE 100%** na primeira execu√ß√£o, sem necessidade de corre√ß√µes p√≥s-entrega.

## ‚ö° COME√áAR AGORA

1. **Criar a estrutura base** (pastas, package.json, configura√ß√µes)
2. **Implementar autentica√ß√£o** (login, sess√µes, middleware)
3. **Criar banco de dados** (schema, migrations, seed data)
4. **Desenvolver backend APIs** (todas as rotas cr√≠ticas)
5. **Implementar frontend** (componentes, p√°ginas, responsividade)
6. **Sistema de rastreamento** (links, convers√µes, comiss√µes)
7. **Dashboards e relat√≥rios** (m√©tricas, gr√°ficos, exports)
8. **Testes e deploy** (valida√ß√£o completa, produ√ß√£o)

**HORA DE CODAR! üöÄ**
